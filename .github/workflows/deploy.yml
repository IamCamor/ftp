name: Deploy FishTrackPro

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: fishtrackpro_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, redis
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      working-directory: ./backend

    - name: Install Composer Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      working-directory: ./backend

    - name: Generate key
      run: php artisan key:generate
      working-directory: ./backend

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      working-directory: ./backend

    - name: Create Database
      run: |
        mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS fishtrackpro_test;"
      working-directory: ./backend

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: fishtrackpro_test
        DB_USERNAME: root
        DB_PASSWORD: password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379
      run: php artisan test
      working-directory: ./backend

    - name: Install NPM Dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Run Frontend Tests
      run: npm test -- --coverage --watchAll=false
      working-directory: ./frontend

    - name: Build Frontend
      run: npm run build
      working-directory: ./frontend

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, redis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Composer Dependencies
      run: composer install --no-dev --optimize-autoloader
      working-directory: ./backend

    - name: Install NPM Dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Build Frontend
      run: npm run build
      working-directory: ./frontend

    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd /var/www/fishtrackpro
          git pull origin main
          cd backend
          composer install --no-dev --optimize-autoloader
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          cd ../frontend
          npm ci
          npm run build
          sudo systemctl reload nginx
          sudo systemctl restart php8.2-fpm

    - name: Notify Deployment
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          STATUS="‚úÖ Success"
        else
          STATUS="‚ùå Failed"
        fi
        
        MESSAGE="üöÄ *Deployment Update*

Repository: ${{ github.repository }}
Branch: ${{ github.ref_name }}
Commit: ${{ github.event.head_commit.message }}
Author: ${{ github.event.head_commit.author.name }}
Status: $STATUS
Time: $(date '+%Y-%m-%d %H:%M:%S')"
        
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d "{
            \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
            \"text\": \"$MESSAGE\",
            \"parse_mode\": \"Markdown\"
          }"
      if: always()
