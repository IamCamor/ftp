#!/usr/bin/env node

import { spawn } from 'child_process';

async function testMCP() {
  console.log('üöÄ Starting MCP Playwright test...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–æ–≤
  try {
    const { Client } = await import('@modelcontextprotocol/sdk/client/index.js');
    console.log('‚úÖ MCP SDK available');
  } catch (error) {
    console.log('‚ùå MCP SDK not available:', error.message);
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
    const { execSync } = await import('child_process');
    execSync('which mcp-server-puppeteer', { stdio: 'ignore' });
    console.log('‚úÖ Puppeteer MCP server binary available');
  } catch (error) {
    console.log('‚ùå Puppeteer MCP server binary not available');
  }

  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ MCP
  console.log('\nüß™ Running basic test...');

  console.log('üì¶ Available npm packages:');
  const packages = [
    '@modelcontextprotocol/sdk',
    'puppeteer-mcp-server',
    '@hisma/server-puppeteer'
  ];

  for (const pkg of packages) {
    try {
      if (pkg === 'puppeteer-mcp-server') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
        const { execSync } = await import('child_process');
        execSync('which mcp-server-puppeteer', { stdio: 'ignore' });
        console.log(`‚úÖ ${pkg} - installed (binary available)`);
      } else {
        await import(pkg);
        console.log(`‚úÖ ${pkg} - installed`);
      }
    } catch (error) {
      console.log(`‚ùå ${pkg} - not found`);
    }
  }

  console.log('\nüéØ MCP Playwright setup completed!');
  console.log('üìñ See MCP_SETUP.md for usage instructions');
}

testMCP().catch(console.error);
