import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import TextInput from '../../components/Form/Text';
import Checkbox from '../../components/Form/Checkbox';
import { register, oauthRedirect } from '../../api';
import config from '../../config';

const RegisterPage: React.FC = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    username: '',
    consents: {
      personalData: false,
      rules: false,
      offer: false,
    },
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const response = await register(formData);
      localStorage.setItem('token', response.token);
      navigate(config.routes.feed);
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleOAuthLogin = (provider: string) => {
    window.location.href = oauthRedirect(provider);
  };

  const allConsentsAccepted = formData.consents.personalData && 
                             formData.consents.rules && 
                             formData.consents.offer;

  return (
    <div className="screen auth-screen">
      <div className="auth-container glass">
        <div className="auth-header">
          <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ FishTrackPro</h1>
          <p>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É —Ä—ã–±–∞–∫–æ–≤!</p>
        </div>

        <form onSubmit={handleSubmit} className="auth-form">
          {error && <div className="error-message">{error}</div>}

          <TextInput
            label="–ò–º—è"
            value={formData.name}
            onChange={(value) => setFormData(prev => ({ ...prev, name: value }))}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
            required
            icon="person"
          />

          <TextInput
            label="Email"
            type="email"
            value={formData.email}
            onChange={(value) => setFormData(prev => ({ ...prev, email: value }))}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
            required
            icon="email"
          />

          <TextInput
            label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            value={formData.username}
            onChange={(value) => setFormData(prev => ({ ...prev, username: value }))}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            icon="alternate_email"
          />

          <TextInput
            label="–ü–∞—Ä–æ–ª—å"
            type="password"
            value={formData.password}
            onChange={(value) => setFormData(prev => ({ ...prev, password: value }))}
            placeholder="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
            required
            icon="lock"
          />

          <div className="consents-section">
            <h3>–°–æ–≥–ª–∞—Å–∏—è</h3>
            
            <Checkbox
              label="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
              checked={formData.consents.personalData}
              onChange={(checked) => setFormData(prev => ({
                ...prev,
                consents: { ...prev.consents, personalData: checked }
              }))}
              required
              link={{
                text: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
                url: config.features.auth.links.personalData
              }}
            />

            <Checkbox
              label="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
              checked={formData.consents.rules}
              onChange={(checked) => setFormData(prev => ({
                ...prev,
                consents: { ...prev.consents, rules: checked }
              }))}
              required
              link={{
                text: '–ü—Ä–∞–≤–∏–ª–∞',
                url: config.features.auth.links.rules
              }}
            />

            <Checkbox
              label="–Ø –ø—Ä–∏–Ω–∏–º–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"
              checked={formData.consents.offer}
              onChange={(checked) => setFormData(prev => ({
                ...prev,
                consents: { ...prev.consents, offer: checked }
              }))}
              required
              link={{
                text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
                url: config.features.auth.links.offer
              }}
            />
          </div>

          <button
            type="submit"
            className="btn btn-primary btn-full"
            disabled={loading || !allConsentsAccepted}
          >
            {loading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </form>

        <div className="auth-divider">
          <span>–∏–ª–∏</span>
        </div>

        <div className="oauth-buttons">
          {config.features.auth.providers.google && (
            <button
              className="oauth-button google"
              onClick={() => handleOAuthLogin('google')}
            >
              <span className="oauth-icon">G</span>
              –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
            </button>
          )}

          {config.features.auth.providers.vk && (
            <button
              className="oauth-button vk"
              onClick={() => handleOAuthLogin('vk')}
            >
              <span className="oauth-icon">VK</span>
              –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ VK
            </button>
          )}

          {config.features.auth.providers.yandex && (
            <button
              className="oauth-button yandex"
              onClick={() => handleOAuthLogin('yandex')}
            >
              <span className="oauth-icon">–Ø</span>
              –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
            </button>
          )}

          {config.features.auth.providers.apple && (
            <button
              className="oauth-button apple"
              onClick={() => handleOAuthLogin('apple')}
            >
              <span className="oauth-icon">üçé</span>
              –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Apple
            </button>
          )}
        </div>

        <div className="auth-footer">
          <p>
            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
            <Link to={config.routes.auth.login} className="auth-link">
              –í–æ–π—Ç–∏
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default RegisterPage;

