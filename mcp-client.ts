import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';
import { spawn, ChildProcess } from 'child_process';

interface MCPToolResult {
  content: Array<{
    type: string;
    text?: string;
    data?: any;
  }>;
  isError?: boolean;
}

interface MCPTool {
  name: string;
  description: string;
  inputSchema: any;
}

export class MCPPlaywrightClient {
  private client: Client | null = null;
  private transport: StdioClientTransport | null = null;
  private serverProcess: ChildProcess | null = null;

  async connect(): Promise<boolean> {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
      this.serverProcess = spawn('npx', ['puppeteer-mcp-server'], {
        stdio: ['pipe', 'pipe', 'inherit']
      });

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      this.transport = new StdioClientTransport({
        reader: this.serverProcess.stdout!,
        writer: this.serverProcess.stdin!
      });

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
      this.client = new Client(
        {
          name: 'fishtrackpro-mcp-client',
          version: '1.0.0'
        },
        {
          capabilities: {
            resources: {},
            tools: {}
          }
        }
      );

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      await this.client.connect(this.transport);
      console.log('‚úÖ MCP Playwright client connected successfully!');

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      const tools = await this.client.listTools();
      console.log('üîß Available tools:', tools.tools.map((t: MCPTool) => t.name));

      return true;
    } catch (error) {
      console.error('‚ùå Failed to connect to MCP server:', error);
      return false;
    }
  }

  async navigateToUrl(url: string): Promise<MCPToolResult> {
    if (!this.client) {
      throw new Error('Client not connected');
    }

    try {
      const result = await this.client.callTool({
        name: 'navigate',
        arguments: { url }
      });
      console.log('üåê Navigated to:', url);
      return result as MCPToolResult;
    } catch (error) {
      console.error('‚ùå Navigation failed:', error);
      throw error;
    }
  }

  async takeScreenshot(filename: string = 'screenshot.png'): Promise<MCPToolResult> {
    if (!this.client) {
      throw new Error('Client not connected');
    }

    try {
      const result = await this.client.callTool({
        name: 'screenshot',
        arguments: { filename }
      });
      console.log('üì∏ Screenshot saved:', filename);
      return result as MCPToolResult;
    } catch (error) {
      console.error('‚ùå Screenshot failed:', error);
      throw error;
    }
  }

  async clickElement(selector: string): Promise<MCPToolResult> {
    if (!this.client) {
      throw new Error('Client not connected');
    }

    try {
      const result = await this.client.callTool({
        name: 'click',
        arguments: { selector }
      });
      console.log('üñ±Ô∏è Clicked element:', selector);
      return result as MCPToolResult;
    } catch (error) {
      console.error('‚ùå Click failed:', error);
      throw error;
    }
  }

  async typeText(selector: string, text: string): Promise<MCPToolResult> {
    if (!this.client) {
      throw new Error('Client not connected');
    }

    try {
      const result = await this.client.callTool({
        name: 'type',
        arguments: { selector, text }
      });
      console.log('‚å®Ô∏è Typed text:', text, 'into:', selector);
      return result as MCPToolResult;
    } catch (error) {
      console.error('‚ùå Type failed:', error);
      throw error;
    }
  }

  async getPageContent(): Promise<MCPToolResult> {
    if (!this.client) {
      throw new Error('Client not connected');
    }

    try {
      const result = await this.client.callTool({
        name: 'getContent',
        arguments: {}
      });
      console.log('üìÑ Page content retrieved');
      return result as MCPToolResult;
    } catch (error) {
      console.error('‚ùå Get content failed:', error);
      throw error;
    }
  }

  async waitForElement(selector: string, timeout: number = 5000): Promise<MCPToolResult> {
    if (!this.client) {
      throw new Error('Client not connected');
    }

    try {
      const result = await this.client.callTool({
        name: 'waitForElement',
        arguments: { selector, timeout }
      });
      console.log('‚è≥ Waited for element:', selector);
      return result as MCPToolResult;
    } catch (error) {
      console.error('‚ùå Wait for element failed:', error);
      throw error;
    }
  }

  async evaluateScript(script: string): Promise<MCPToolResult> {
    if (!this.client) {
      throw new Error('Client not connected');
    }

    try {
      const result = await this.client.callTool({
        name: 'evaluate',
        arguments: { script }
      });
      console.log('üîç Script evaluated:', script.substring(0, 50) + '...');
      return result as MCPToolResult;
    } catch (error) {
      console.error('‚ùå Script evaluation failed:', error);
      throw error;
    }
  }

  async close(): Promise<void> {
    if (this.client) {
      await this.client.close();
      console.log('üîå MCP client disconnected');
    }
    
    if (this.serverProcess) {
      this.serverProcess.kill();
      console.log('üîÑ MCP server process terminated');
    }
  }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è FishTrackPro
export class FishTrackProTester {
  private mcpClient: MCPPlaywrightClient;

  constructor() {
    this.mcpClient = new MCPPlaywrightClient();
  }

  async testApplication(): Promise<void> {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
      const connected = await this.mcpClient.connect();
      if (!connected) {
        throw new Error('Failed to connect to MCP server');
      }

      console.log('\nüé£ Testing FishTrackPro with MCP Playwright...\n');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await this.mcpClient.navigateToUrl('http://localhost:5173');
      await this.sleep(2000); // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.mcpClient.takeScreenshot('fishtrackpro-home.png');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const content = await this.mcpClient.getPageContent();
      console.log('üìÑ Page content length:', content.content?.[0]?.text?.length || 0);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      await this.testNavigation();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
      await this.testFunctionality();
      
      console.log('\n‚úÖ FishTrackPro MCP test completed successfully!');
      
    } catch (error) {
      console.error('‚ùå Test failed:', error);
      throw error;
    } finally {
      await this.mcpClient.close();
    }
  }

  private async testNavigation(): Promise<void> {
    console.log('\nüß≠ Testing navigation...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ä—Ç—ã
    try {
      await this.mcpClient.clickElement('button[data-testid="map-nav"]');
      await this.sleep(2000);
      await this.mcpClient.takeScreenshot('fishtrackpro-map.png');
      console.log('‚úÖ Map navigation successful');
    } catch (error) {
      console.log('‚ÑπÔ∏è Map navigation not available or not clickable');
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
    try {
      await this.mcpClient.clickElement('button[data-testid="profile-nav"]');
      await this.sleep(2000);
      await this.mcpClient.takeScreenshot('fishtrackpro-profile.png');
      console.log('‚úÖ Profile navigation successful');
    } catch (error) {
      console.log('‚ÑπÔ∏è Profile navigation not available or not clickable');
    }
  }

  private async testFunctionality(): Promise<void> {
    console.log('\n‚öôÔ∏è Testing functionality...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —É–ª–æ–≤"
    try {
      await this.mcpClient.clickElement('button[data-testid="add-catch"]');
      await this.sleep(1000);
      await this.mcpClient.takeScreenshot('fishtrackpro-add-catch.png');
      console.log('‚úÖ Add catch functionality accessible');
    } catch (error) {
      console.log('‚ÑπÔ∏è Add catch button not found or not clickable');
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"
    try {
      await this.mcpClient.clickElement('button[data-testid="add-point"]');
      await this.sleep(1000);
      await this.mcpClient.takeScreenshot('fishtrackpro-add-point.png');
      console.log('‚úÖ Add point functionality accessible');
    } catch (error) {
      console.log('‚ÑπÔ∏è Add point button not found or not clickable');
    }
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export default MCPPlaywrightClient;
