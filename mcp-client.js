#!/usr/bin/env node

import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';
import { spawn } from 'child_process';

class MCPPlaywrightClient {
  constructor() {
    this.client = null;
    this.transport = null;
  }

  async connect() {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
      const serverProcess = spawn('npx', ['puppeteer-mcp-server'], {
        stdio: ['pipe', 'pipe', 'inherit']
      });

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      this.transport = new StdioClientTransport({
        reader: serverProcess.stdout,
        writer: serverProcess.stdin
      });

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
      this.client = new Client(
        {
          name: 'fishtrackpro-mcp-client',
          version: '1.0.0'
        },
        {
          capabilities: {
            resources: {},
            tools: {}
          }
        }
      );

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      await this.client.connect(this.transport);
      console.log('‚úÖ MCP Playwright client connected successfully!');

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      const tools = await this.client.listTools();
      console.log('üîß Available tools:', tools.tools.map(t => t.name));

      return true;
    } catch (error) {
      console.error('‚ùå Failed to connect to MCP server:', error);
      return false;
    }
  }

  async navigateToUrl(url) {
    try {
      const result = await this.client.callTool({
        name: 'navigate',
        arguments: { url }
      });
      console.log('üåê Navigated to:', url);
      return result;
    } catch (error) {
      console.error('‚ùå Navigation failed:', error);
      throw error;
    }
  }

  async takeScreenshot(filename = 'screenshot.png') {
    try {
      const result = await this.client.callTool({
        name: 'screenshot',
        arguments: { filename }
      });
      console.log('üì∏ Screenshot saved:', filename);
      return result;
    } catch (error) {
      console.error('‚ùå Screenshot failed:', error);
      throw error;
    }
  }

  async clickElement(selector) {
    try {
      const result = await this.client.callTool({
        name: 'click',
        arguments: { selector }
      });
      console.log('üñ±Ô∏è Clicked element:', selector);
      return result;
    } catch (error) {
      console.error('‚ùå Click failed:', error);
      throw error;
    }
  }

  async typeText(selector, text) {
    try {
      const result = await this.client.callTool({
        name: 'type',
        arguments: { selector, text }
      });
      console.log('‚å®Ô∏è Typed text:', text, 'into:', selector);
      return result;
    } catch (error) {
      console.error('‚ùå Type failed:', error);
      throw error;
    }
  }

  async getPageContent() {
    try {
      const result = await this.client.callTool({
        name: 'getContent',
        arguments: {}
      });
      console.log('üìÑ Page content retrieved');
      return result;
    } catch (error) {
      console.error('‚ùå Get content failed:', error);
      throw error;
    }
  }

  async close() {
    if (this.client) {
      await this.client.close();
      console.log('üîå MCP client disconnected');
    }
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function main() {
  const mcpClient = new MCPPlaywrightClient();
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    const connected = await mcpClient.connect();
    if (!connected) {
      process.exit(1);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º FishTrackPro
    console.log('\nüé£ Testing FishTrackPro with MCP Playwright...\n');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await mcpClient.navigateToUrl('http://localhost:5173');
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await mcpClient.takeScreenshot('fishtrackpro-home.png');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const content = await mcpClient.getPageContent();
    console.log('üìÑ Page title:', content.content?.[0]?.text?.substring(0, 100) + '...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —É–ª–æ–≤" (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try {
      await mcpClient.clickElement('button[data-testid="add-catch"]');
      await new Promise(resolve => setTimeout(resolve, 1000));
      await mcpClient.takeScreenshot('fishtrackpro-add-catch.png');
    } catch (error) {
      console.log('‚ÑπÔ∏è Add catch button not found or not clickable');
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–∞—Ä—Ç—É
    try {
      await mcpClient.clickElement('button[data-testid="map-nav"]');
      await new Promise(resolve => setTimeout(resolve, 2000));
      await mcpClient.takeScreenshot('fishtrackpro-map.png');
    } catch (error) {
      console.log('‚ÑπÔ∏è Map navigation not found');
    }

    console.log('\n‚úÖ MCP Playwright test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await mcpClient.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export default MCPPlaywrightClient;
